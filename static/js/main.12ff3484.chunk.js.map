{"version":3,"sources":["logo.svg","util/get-fields.js","components/copy-paste.js","App.js","reportWebVitals.js","index.js"],"names":["highlightField","format","target","arr","replaceAll","split","style","whiteSpace","map","str","className","CopyPaste","title","fieldNames","fields","reg","Set","forEach","field","add","replace","getFieldNames","match","getFields","useState","form","updateForm","updateTarget","display","updateDisplay","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","transition","Slide","limit","fieldName","value","onFocus","onChange","e","placeholder","onClick","targets","Object","keys","key","i","res","has","strRes","replaceFields","navigator","clipboard","writeText","toast","clearWaitingQueue","success","App","formatsInput","updateFormatsInput","formats","updateFormats","id","maxRows","length","push","console","log","titles","result","Math","min","trim","getFormats","document","getElementById","scrollIntoView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.12ff3484.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const getFields = (format) => {\r\n    const reg = /\\$\\{([^\\}]*)\\}/g;\r\n    return format.match(reg) ? format.match(reg) : [];\r\n};\r\n\r\nexport const getFieldNames = (fields) => {\r\n    const reg = /\\$\\{([^\\}]*)\\}/;\r\n    let fieldNames = new Set();\r\n    fields.forEach((field) => {\r\n        fieldNames.add(field.replace(reg, '$1'));\r\n    });\r\n    return [...fieldNames];\r\n};\r\n\r\nexport const highlightField = (format, target) => {\r\n    format = format.replaceAll(`\\${${target}}`, `,\\${${target}},`);\r\n    let arr = format.split(',');\r\n    let res = (\r\n        <span style={{ whiteSpace: 'pre-line' }}>\r\n            {arr.map((str) => (\r\n                <span style={{ whiteSpace: 'pre-line' }}>\r\n                    {str !== `\\${${target}}` && str}\r\n                    {str === `\\${${target}}` && <span className=\"highlight\">{str}</span>}\r\n                </span>\r\n            ))}\r\n        </span>\r\n    );\r\n    return res;\r\n};\r\n\r\nexport const replaceFields = (format, form) => {\r\n    let targets = new Set();\r\n    Object.keys(form).forEach((key, i) => {\r\n        format = format.replaceAll(`\\${${key}}`, `,\\${${key}},`);\r\n        targets.add(`\\${${key}}`);\r\n    });\r\n\r\n    let arr = format.split(',');\r\n\r\n    let res = (\r\n        <span style={{ whiteSpace: 'pre-line' }}>\r\n            {arr.map((str, i) => {\r\n                let key = str.replace('${', '').replace('}', '');\r\n                return (\r\n                    <span style={{ whiteSpace: 'pre-line' }}>\r\n                        {!targets.has(str) && str}\r\n                        {targets.has(str) && <span className=\"highlight\">{form[key]}</span>}\r\n                    </span>\r\n                );\r\n            })}\r\n        </span>\r\n    );\r\n    let strRes = '';\r\n    arr.forEach((str) => {\r\n        let key = str.replace('${', '').replace('}', '');\r\n        strRes += targets.has(str) ? form[key] : str;\r\n    });\r\n    return { strRes: strRes, res: res };\r\n};\r\n\r\nexport const getFormats = (formats) => {\r\n    let res = formats.split(/=== [^=]* ===/);\r\n    let arr = [];\r\n    for(let i = 0; i < res.length; i++) {\r\n        if(res[i].length > 0) arr.push(res[i]);\r\n    }\r\n    console.log(arr);\r\n    let titles = formats.match(/=== [^=]* ===/g) ? formats.match(/=== [^=]* ===/g) : [];\r\n    for(let i = 0; i < titles.length; i++) {\r\n        titles[i] = titles[i].replaceAll('===', '');\r\n    }\r\n    let result = [];\r\n    for(let i = 0; i < Math.min(arr.length, titles.length); i++) {\r\n        result.push({title: titles[i], format: arr[i].trim()});\r\n    }\r\n    console.log(result);\r\n    return result;\r\n};\r\n","import { useState } from 'react';\r\nimport { ToastContainer, toast, Slide } from 'react-toastify';\r\nimport { getFieldNames, getFields, highlightField, replaceFields } from '../util/get-fields';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './copy-paste.scss';\r\n\r\nconst CopyPaste = ({ title, format }) => {\r\n    let fields = getFields(format);\r\n    let fieldNames = getFieldNames(fields);\r\n\r\n    const [form, updateForm] = useState({});\r\n    const [target, updateTarget] = useState('');\r\n    const [display, updateDisplay] = useState(null);\r\n\r\n    const generate = () => {\r\n        const { strRes, res } = replaceFields(format, form);\r\n        navigator.clipboard.writeText(strRes);\r\n        toast.clearWaitingQueue();\r\n        toast.success(`Copied to clipboard`);\r\n        toast.clearWaitingQueue();\r\n        updateDisplay(res);\r\n    };\r\n\r\n    return (\r\n        <div className=\"copy-paste\">\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={800}\r\n                hideProgressBar={true}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                transition={Slide}\r\n                limit={1}\r\n            />\r\n            <h3 className='title'>{title}</h3>\r\n            <div className=\"display\">{highlightField(format, target)}</div>\r\n            <div className=\"inputs\">\r\n                {fieldNames.map((fieldName) => (\r\n                    <input\r\n                        value={form[fieldName]}\r\n                        onFocus={() => updateTarget(fieldName)}\r\n                        onChange={(e) => updateForm({ ...form, [fieldName]: `${e.target.value}` })}\r\n                        placeholder={fieldName}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <button onClick={generate}>Generate</button>\r\n            <div className=\"display\">{display}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CopyPaste;\r\n","import { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CopyPaste from './components/copy-paste';\nimport { getFormats } from './util/get-fields';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nfunction App() {\n    const [formatsInput, updateFormatsInput] = useState('');\n    const [formats, updateFormats] = useState([]);\n\n    return (\n        <div className=\"App\">\n            <TextareaAutosize id=\"formats-input\" value={formatsInput} onChange={(e) => updateFormatsInput(e.target.value)} maxRows={20} />\n            <button onClick={() => updateFormats(getFormats(formatsInput))}>Generate Forms</button>\n            <div className=\"nav\">\n                {formats.map(({ title, format }, key) => (\n                    <button onClick={() => document.getElementById(title).scrollIntoView()}>{title}</button>\n                ))}\n            </div>\n            {formats.map(\n                ({ title, format }, key) =>\n                    format.length > 0 && (\n                        <div id={title}>\n                            <CopyPaste id={title} title={title} format={format} />\n                        </div>\n                    )\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}